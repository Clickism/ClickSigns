plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

version = property('mod.version') + "+" + stonecutter.current.version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    gradlePluginPortal()
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${stonecutter.current.project}"
    mappings "net.fabricmc:yarn:${property('deps.yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"
}

processResources {
    def properties = [
            "version" : version,
            "targetVersion" : project.property('mod.mc_version'),
            "minecraftVersion" : stonecutter.current.version,
            "fabricVersion" : project.property('deps.fabric_loader'),
    ]

    filesMatching("fabric.mod.json") {
        expand properties
    }
    inputs.properties(properties)
}

java {
    withSourcesJar()
    def j21 = stonecutter.eval(stonecutter.current.version, ">=1.20.5")
    toolchain {
        languageVersion.set(j21 ? JavaLanguageVersion.of(21) : JavaLanguageVersion.of(17))
    }
    def java = j21 ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    sourceCompatibility = java
    targetCompatibility = java
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

loom {
    runConfigs.all {
        ideConfigGenerated true // Run configurations are not created for subprojects by default
        runDir "../../run" // Use a shared run folder and create separate worlds
    }
}